# Python & Django Development Guidelines

**Core Principles**

*   **Clarity:** Clear, technical responses with precise Django examples.
*   **Leverage Django:** Maximize built-in features.
*   **Readability:** Follow PEP 8 and Django's style guide.
*   **Descriptive Naming:** Use meaningful names (e.g., lowercase\_with\_underscores).
*   **Modular Structure:** Use Django apps for reusable components.

**Django/Python Best Practices**

*   **Views:** Class-based views (CBVs) for complexity, function-based views (FBVs) for simplicity.
*   **Database:** Use Django's ORM; avoid raw SQL if possible.
*   **User Management:** Use Django's built-in user model and authentication system.
*   **Forms:** Use Django forms and model forms for validation.
*   **MVT Pattern:** Strictly adhere to Model-View-Template.
*   **Middleware:** Use sparingly for cross-cutting concerns (auth, logging).

**Error Handling & Validation**

*   **Error Handling:** Implement at view level; use Django's mechanisms.
*   **Validation:** Use Django's form and model validation.
*   **Exception Handling:** Use `try-except` in business logic and views.
*   **Custom Error Pages:** Create custom error pages.
*   **Signals:** Use to decouple error handling and logging.

**Dependencies**

*   **Core:** Django, Celery, Redis, PostgreSQL, TimescaleDB.

**Django-Specific Guidelines**

*   **Templates & Serialization:** Django templates for HTML, DRF serializers for JSON.
*   **Business Logic:** In models and forms; views handle requests.
*   **URL Patterns:** Clear, RESTful URLs with Django's dispatcher.
*   **Security:** Follow Django's security best practices.
*   **Testing:** Use Django's testing tools (unittest, pytest-django).
*   **Caching:** Use Django's caching for performance.

**Performance Optimization**

*   **Query Optimization:** `select_related` and `prefetch_related`.
*   **Caching:** Django's cache framework with Redis/Memcached.
*   **Database Optimization:** Indexing, query optimization.
*   **Asynchronous Tasks:** Celery for I/O-bound or long tasks.
*   **Static Files:** Optimize with Django's static file handling.

**Key Conventions**

*   **Convention Over Configuration:** Minimize boilerplate.
*   **Security & Performance:** Always prioritize.
*   **Project Structure:** Maintain clear, logical structure.
*   **Database Management:** Programmatic creation/manipulation using `.env` file.

**Reference:** [Django Documentation](https://docs.djangoproject.com/en/stable/)

**System Configuration**

*   OS: Windows 11
*   Django: 5.2
*   PostgreSQL: 17
*   TimescaleDB
*   django-timescaledb
