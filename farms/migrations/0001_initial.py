# Generated by Django 5.1.3 on 2024-12-06 11:02

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("registration_number", models.CharField(max_length=100, unique=True)),
                ("address", models.TextField()),
                ("contact_email", models.EmailField(max_length=254)),
                ("contact_phone", models.CharField(max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Companies",
            },
        ),
        migrations.CreateModel(
            name="SolarPanelModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("manufacturer", models.CharField(max_length=100)),
                ("model_name", models.CharField(max_length=100)),
                (
                    "year_of_release",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Year of model release",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1990),
                            django.core.validators.MaxValueValidator(2100),
                        ],
                    ),
                ),
                (
                    "technology_type",
                    models.CharField(
                        choices=[
                            ("MONO", "Monocrystalline"),
                            ("POLY", "Polycrystalline"),
                            ("THIN", "Thin-film"),
                            ("PERC", "PERC"),
                            ("BIFACIAL", "Bifacial"),
                            ("HJT", "Heterojunction"),
                            ("OTHER", "Other"),
                        ],
                        help_text="Panel technology type",
                        max_length=10,
                    ),
                ),
                (
                    "bifacial",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the panel can produce power from both sides",
                    ),
                ),
                (
                    "half_cells",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the panel uses half-cut cell technology",
                    ),
                ),
                (
                    "power_output",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Power output in kW",
                        max_digits=8,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "power_tolerance",
                    models.DecimalField(
                        decimal_places=2,
                        default=3.0,
                        help_text="Power tolerance in ± %",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "efficiency",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Panel efficiency percentage",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "max_system_voltage",
                    models.PositiveIntegerField(
                        default=1000,
                        help_text="Maximum system voltage (V)",
                        validators=[
                            django.core.validators.MinValueValidator(600),
                            django.core.validators.MaxValueValidator(1500),
                        ],
                    ),
                ),
                (
                    "vmp",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Voltage at maximum power (Vmpp)",
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "voc",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Open circuit voltage (Voc)",
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "imp",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Current at maximum power (Impp)",
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "isc",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Short circuit current (Isc)",
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "temp_coefficient_pmax",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Temperature coefficient of Pmax (%/°C)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(-1),
                            django.core.validators.MaxValueValidator(0),
                        ],
                    ),
                ),
                (
                    "temp_coefficient_voc",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Temperature coefficient of Voc (%/°C)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(-1),
                            django.core.validators.MaxValueValidator(0),
                        ],
                    ),
                ),
                (
                    "temp_coefficient_isc",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Temperature coefficient of Isc (%/°C)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "nominal_operating_temp",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Nominal Operating Cell Temperature (°C)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(60),
                        ],
                    ),
                ),
                (
                    "length",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Length in millimeters",
                        max_digits=6,
                    ),
                ),
                (
                    "width",
                    models.DecimalField(
                        decimal_places=2, help_text="Width in millimeters", max_digits=6
                    ),
                ),
                (
                    "depth",
                    models.DecimalField(
                        decimal_places=2, help_text="Depth in millimeters", max_digits=5
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        decimal_places=2, help_text="Weight in kilograms", max_digits=6
                    ),
                ),
                (
                    "frame_type",
                    models.CharField(
                        default="Aluminum",
                        help_text="Frame material type",
                        max_length=50,
                    ),
                ),
                (
                    "front_glass_thickness",
                    models.DecimalField(
                        decimal_places=1,
                        default=3.2,
                        help_text="Front glass thickness in mm",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "certifications",
                    models.JSONField(
                        blank=True,
                        help_text="List of certifications (e.g., IEC, UL)",
                        null=True,
                    ),
                ),
                (
                    "product_warranty",
                    models.PositiveIntegerField(
                        default=10,
                        help_text="Product warranty in years",
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(30),
                        ],
                    ),
                ),
                (
                    "performance_warranty",
                    models.PositiveIntegerField(
                        default=25,
                        help_text="Performance warranty in years",
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(30),
                        ],
                    ),
                ),
                (
                    "performance_warranty_degradation",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.55,
                        help_text="Annual power degradation percentage",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "max_static_load_front",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum static front load (Pa)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                    ),
                ),
                (
                    "max_static_load_back",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum static back load (Pa)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Solar Panel Model",
                "verbose_name_plural": "Solar Panel Models",
                "indexes": [
                    models.Index(
                        fields=["manufacturer", "model_name"],
                        name="farms_solar_manufac_cb67f7_idx",
                    ),
                    models.Index(
                        fields=["power_output"], name="farms_solar_power_o_1b92ed_idx"
                    ),
                    models.Index(
                        fields=["technology_type"],
                        name="farms_solar_technol_b6f170_idx",
                    ),
                    models.Index(
                        fields=["efficiency"], name="farms_solar_efficie_378522_idx"
                    ),
                ],
                "unique_together": {("manufacturer", "model_name")},
            },
        ),
        migrations.CreateModel(
            name="SolarFarm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("location", models.CharField(max_length=200)),
                (
                    "latitude",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=9,
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ],
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=9,
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ],
                    ),
                ),
                (
                    "total_area",
                    models.DecimalField(
                        decimal_places=2, help_text="Area in hectares", max_digits=10
                    ),
                ),
                ("commissioned_date", models.DateField(blank=True, null=True)),
                (
                    "nominal_power",
                    models.DecimalField(
                        decimal_places=2, help_text="Nominal power in MW", max_digits=10
                    ),
                ),
                ("operational_status", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("number_of_panels", models.PositiveIntegerField()),
                (
                    "tracking_system",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the panels have a solar tracking system",
                    ),
                ),
                (
                    "tilt_angle",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Panel tilt angle in degrees",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(90),
                        ],
                    ),
                ),
                (
                    "azimuth_angle",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Panel azimuth angle in degrees",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(360),
                        ],
                    ),
                ),
                (
                    "array_configuration",
                    models.TextField(
                        blank=True,
                        help_text="Description of panel array configuration and spacing",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="solar_farms",
                        to="farms.company",
                    ),
                ),
                (
                    "panel_model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="farms.solarpanelmodel",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="WindTurbineModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("manufacturer", models.CharField(max_length=100)),
                ("model_name", models.CharField(max_length=100)),
                (
                    "year_of_release",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Year of model release",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1980),
                            django.core.validators.MaxValueValidator(2100),
                        ],
                    ),
                ),
                (
                    "power_output",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Power output in kW",
                        max_digits=8,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "cut_in_speed",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Cut-in wind speed in m/s",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "cut_out_speed",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Cut-out wind speed in m/s",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(40),
                        ],
                    ),
                ),
                (
                    "rated_wind_speed",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Rated wind speed in m/s",
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(30),
                        ],
                    ),
                ),
                (
                    "survival_wind_speed",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Maximum survival wind speed in m/s",
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(30),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "wind_class",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("IA", "IEC IA"),
                            ("IB", "IEC IB"),
                            ("IC", "IEC IC"),
                            ("IIA", "IEC IIA"),
                            ("IIB", "IEC IIB"),
                            ("IIC", "IEC IIC"),
                            ("IIIA", "IEC IIIA"),
                            ("IIIB", "IEC IIIB"),
                            ("IIIC", "IEC IIIC"),
                            ("S", "IEC S (Special)"),
                        ],
                        help_text="IEC Wind Class",
                        max_length=4,
                        null=True,
                    ),
                ),
                (
                    "rotor_diameter",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Rotor diameter in meters",
                        max_digits=6,
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(300),
                        ],
                    ),
                ),
                (
                    "swept_area",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Swept area in m²",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "number_of_blades",
                    models.PositiveIntegerField(
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(2),
                            django.core.validators.MaxValueValidator(4),
                        ],
                    ),
                ),
                (
                    "max_rotor_speed",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Maximum rotor speed in rpm",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "generator_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DFIG", "Doubly-Fed Induction Generator"),
                            ("PMSG", "Permanent Magnet Synchronous Generator"),
                            ("SCIG", "Squirrel Cage Induction Generator"),
                            ("WRIG", "Wound Rotor Induction Generator"),
                            ("OTHER", "Other"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "generator_voltage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Generator voltage in V",
                        max_digits=8,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "grid_frequency",
                    models.CharField(
                        default="50/60", help_text="Grid frequency in Hz", max_length=10
                    ),
                ),
                (
                    "hub_height",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Hub height in meters",
                        max_digits=6,
                        validators=[
                            django.core.validators.MinValueValidator(20),
                            django.core.validators.MaxValueValidator(300),
                        ],
                    ),
                ),
                (
                    "tower_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("STEEL", "Steel Tube"),
                            ("HYBRID", "Hybrid"),
                            ("CONCRETE", "Concrete"),
                            ("LATTICE", "Lattice"),
                            ("OTHER", "Other"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "nacelle_weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Nacelle weight in tonnes",
                        max_digits=8,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "power_curve",
                    models.JSONField(
                        blank=True,
                        help_text="Power curve data points as JSON: {'wind_speeds': [], 'power_output': []}",
                        null=True,
                    ),
                ),
                ("onshore_suitable", models.BooleanField(default=True)),
                ("offshore_suitable", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Wind Turbine Model",
                "verbose_name_plural": "Wind Turbine Models",
                "indexes": [
                    models.Index(
                        fields=["manufacturer", "model_name"],
                        name="farms_windt_manufac_bad7c3_idx",
                    ),
                    models.Index(
                        fields=["power_output"], name="farms_windt_power_o_7905e3_idx"
                    ),
                    models.Index(
                        fields=["rotor_diameter"], name="farms_windt_rotor_d_540883_idx"
                    ),
                ],
                "unique_together": {("manufacturer", "model_name")},
            },
        ),
        migrations.CreateModel(
            name="WindFarm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("location", models.CharField(max_length=200)),
                (
                    "latitude",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=9,
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ],
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=9,
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ],
                    ),
                ),
                (
                    "total_area",
                    models.DecimalField(
                        decimal_places=2, help_text="Area in hectares", max_digits=10
                    ),
                ),
                ("commissioned_date", models.DateField(blank=True, null=True)),
                (
                    "nominal_power",
                    models.DecimalField(
                        decimal_places=2, help_text="Nominal power in MW", max_digits=10
                    ),
                ),
                ("operational_status", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("number_of_turbines", models.PositiveIntegerField()),
                (
                    "average_wind_speed",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Average wind speed at hub height in m/s",
                        max_digits=4,
                        null=True,
                    ),
                ),
                (
                    "layout_description",
                    models.TextField(
                        blank=True,
                        help_text="Description of turbine layout and spacing",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wind_farms",
                        to="farms.company",
                    ),
                ),
                (
                    "turbine_model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="farms.windturbinemodel",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
